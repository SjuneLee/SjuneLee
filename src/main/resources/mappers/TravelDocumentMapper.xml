<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="TravelDocumentMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="travel" type="study.spring.seoul4u.model.TravelDocument">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="id" column="id" />
        <result property="category" column="category" />
        <result property="subject" column="subject" />
        <result property="summary" column="summary" />
        <result property="content" column="content" />
        <result property="address" column="address" />
        <result property="mapX" column="map_x" />
        <result property="mapY" column="map_y" />
        <result property="likeSum" column="like_sum" />
        <result property="ratingAvg" column="rating_avg" />
        <result property="hit" column="hit" />
        <result property="regDate" column="reg_date" />
        <result property="editDate" column="edit_date" />
        <result property="memberId" column="member_id" />
        <result property="search" column="search" />
        <result property="rating" column="rating" />
        <result property="travelId" column="travel_id" />
    </resultMap>
    

	<!-- 게시물 목록을 조회한다. -->
	<select id="selectTravelList" parameterType="study.spring.seoul4u.model.TravelDocument" 
		resultMap="travel">
        SELECT id,category,subject,content,member_id,  
               DATE_FORMAT(reg_date, '%Y-%m-%d') as reg_date
              
        FROM   travel
		
  	   <where>
			category=#{category}
			 	<if test="subject != null or content != null">
				AND (
					<if test="search == 'subject'">
						subject LIKE concat('%', #{subject}, '%')
					</if>
					<if test="search == 'content'">
						content LIKE concat('%', #{content}, '%')
					</if>
						)
				</if>
		</where> 
		
		ORDER  BY id DESC
		LIMIT #{limitStart}, #{listCount}
  	</select>

	<!-- 전체검색 여행지 게시물 조회한다  -->
	<select id="selectTravelSearch" parameterType="study.spring.seoul4u.model.TravelDocument" 
		resultMap="travel">
        SELECT id,subject,content,category      
        FROM   travel
		
  	   <where>
			subject LIKE concat('%', #{subject}, '%') OR content LIKE concat('%', #{content}, '%') 		
	   </where> 
  	</select>  	

  		<!-- 게시글 정보 저장하기 -->
	<insert id="insertTravel" parameterType="study.spring.seoul4u.model.TravelDocument" 
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO travel (
			category, subject, summary, content, address,map_x,map_y, like_sum, rating_avg, hit, reg_date, edit_date ,member_id
		) VALUES (
			#{category}, #{subject}, #{summary}, #{content}, #{address}, #{mapX},#{mapY},0, 0, 0, now(), now(), #{memberId}
		)
	</insert>
	
	<!-- 게시물 하나에 대한 정보를 조회한다. -->
	<select id="selectTravel" 
		parameterType="study.spring.seoul4u.model.TravelDocument" 
		resultMap="travel">
		SELECT id,category, subject, summary, content, address,like_sum, rating_avg, hit, reg_date, edit_date,   
			   DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') as reg_date, 
			   DATE_FORMAT(edit_date, '%Y-%m-%d %H:%i:%s') as edit_date, map_x, map_y, member_id
		FROM   travel
		WHERE  category=#{category} AND id=#{id}
	</select>
	
	<!-- 이전글 정보를 조회한다. -->
	<select id="selectPrevTravel" 
		parameterType="study.spring.seoul4u.model.TravelDocument" 
		resultMap="travel">
		SELECT id, category, subject, summary, content, address,like_sum, rating_avg, hit, reg_date, edit_date,   
			   DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') as reg_date, 
			   DATE_FORMAT(edit_date, '%Y-%m-%d %H:%i:%s') as edit_date, member_id
		FROM   travel
		WHERE  category=#{category} AND id &lt; #{id}
		ORDER  BY id DESC
		LIMIT  0, 1
	</select>
	
	<!-- 다음글 정보를 조회한다. -->
	<select id="selectNextTravel" 
		parameterType="study.spring.seoul4u.model.TravelDocument" 
		resultMap="travel">
		SELECT id, category, subject, summary, content, address,like_sum, rating_avg, hit, reg_date, edit_date,   
			   DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') as reg_date, 
			   DATE_FORMAT(edit_date, '%Y-%m-%d %H:%i:%s') as edit_date, 
			   member_id
		FROM   travel
		WHERE  category=#{category} AND  id &gt; #{id}
		ORDER  BY id ASC
		LIMIT  0, 1
	</select>
	
	<!-- 조회수 1 증가 -->
	<update id="updateTravelHit" parameterType="study.spring.seoul4u.model.TravelDocument">
		UPDATE travel SET hit=hit+1 WHERE category=#{category} AND id=#{id}
	</update>

	
	<!-- 전체 게시물 수를 조회한다. -->
	<select id="selectTravelCount"
		parameterType="study.spring.seoul4u.model.TravelDocument"
		resultType="int">
		SELECT COUNT(id) FROM travel
 		<where>
			category=#{category} 
			 	<if test="subject != null or content != null">
				AND (
					<if test="search == 'subject'">
						subject LIKE concat('%', #{subject}, '%')
					</if>
					<if test="search == 'content'">
						content LIKE concat('%', #{content}, '%')
					</if>
						)
				</if>
		</where> 
	</select>
	
	
	<!-- 게시글 삭제 하기 -->
	<delete id="deleteTravel" parameterType="study.spring.seoul4u.model.TravelDocument">
		DELETE FROM travel WHERE id=#{id}
	</delete>
	
	<!-- 게시글 정보 수정하기 -->
	<update id="updateTravel" parameterType="study.spring.seoul4u.model.TravelDocument">
	UPDATE 	travel 
	SET
 			category= #{category}, 
			subject=#{subject},
			summary=#{summary},
			content=#{content},
			address=#{address},
			edit_date=now(),
			map_x = #{mapX},
			map_y = #{mapY}
	WHERE 	id=#{id}
	
	</update>
	
 	<!-- 여행지 좋아요 클릭시 like_sum 업데이트 -->
	<update id="plusLikeSum" parameterType="study.spring.seoul4u.model.TravelDocument">
	UPDATE travel SET like_sum = like_sum + 1
	WHERE id=#{id}
	</update>
	
	<!-- 여행지 좋아요 해제시 like_sum 업데이트 -->
	<update id="minusLikeSum" parameterType="study.spring.seoul4u.model.TravelDocument">
	UPDATE travel SET like_sum = like_sum - 1
	WHERE id=#{id}
	</update>
	
	<!-- rating 추가/삭제/수정시 rating_avg 업데이트  -->
	<update id="selectTravelRatingAvg" parameterType="study.spring.seoul4u.model.TravelDocument">
		update travel 
		set  rating_avg = ( SELECT ROUND(AVG(c.rating),2) FROM comment c WHERE c.travel_id = #{travelId} )
		WHERE id = #{travelId}
	</update>	
	
</mapper>