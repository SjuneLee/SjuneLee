<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="NoticeMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="notice" type="study.spring.seoul4u.model.Notice">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="id" column="id" />
		<result property="category" column="category" />
		<result property="subject" column="subject" />
		<result property="content" column="content" />
		<result property="hit" column="hit" />
		<result property="regDate" column="reg_date" />
		<result property="editDate" column="edit_date" />
		<result property="ipAddress" column="ip_address" />
		<result property="memberId" column="member_id" />
		<result property="search" column="search" />
	</resultMap>
	
	<!-- 공지사항 게시물 목록을 조회한다 -->
	<select id="selectNoticeList" parameterType="study.spring.seoul4u.model.Notice" resultMap="notice">
		SELECT id, category, subject, content, hit, DATE_FORMAT(reg_date, '%Y-%m-%d') as reg_date,
		       DATE_FORMAT(edit_date, '%Y-%m-%d') as edit_date, ip_address
		FROM customer_center
		
		<where>
			category = 'notice'
			<if test="subject != null or content != null">
				AND (
					<if test="search == 'subject'">
						subject LIKE concat('%', #{subject}, '%')
					</if>
					<if test="search == 'content'">
						content LIKE concat('%', #{content}, '%')
					</if>
						)
				</if>
		</where>
		
		ORDER BY id DESC
		LIMIT #{limitStart}, #{listCount}
	</select>
	
	<!-- 공지사항 게시물 하나에 대한 정보를 조회한다. -->
	<select id="selectNotice"
		parameterType="study.spring.seoul4u.model.Notice"
		resultMap="notice">
		SELECT id, category, subject, content, hit,
			   DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') as reg_date, 
			   DATE_FORMAT(edit_date, '%Y-%m-%d %H:%i:%s') as edit_date, 
			   ip_address, member_id
		FROM   customer_center
		WHERE  category='notice' AND id=#{id}
	</select>
	
	<!-- 관리자가 등록한 게시물인지 검사한다.(리턴: customer_center의 primary key) -->
	<select id="selectNoticeCountByMemberId"
		parameterType="study.spring.seoul4u.model.Notice"
		resultType="int">
		SELECT COUNT(id) FROM customer_center
		WHERE category='notice' AND id=#{id} AND member_id=#{memberId}
	</select>
	
	<!-- 이전글 정보를 조회한다. -->
	<select id="selectPrevNotice"
		parameterType="study.spring.seoul4u.model.Notice"
		resultMap="notice">
		SELECT id, category, subject, content, hit,
			   DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') as reg_date, 
			   DATE_FORMAT(edit_date, '%Y-%m-%d %H:%i:%s') as edit_date, 
			   ip_address, member_id
		FROM   customer_center
		WHERE  category='notice' AND id &lt; #{id}
		ORDER  BY id DESC
		LIMIT  0, 1
	</select>
	
	<!-- 다음글 정보를 조회한다. -->
	<select id="selectNextNotice"
		parameterType="study.spring.seoul4u.model.Notice"
		resultMap="notice">
		SELECT id, category, subject, content, hit,
			   DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') as reg_date, 
			   DATE_FORMAT(edit_date, '%Y-%m-%d %H:%i:%s') as edit_date, 
			   ip_address, member_id
		FROM   customer_center
		WHERE  category='notice' AND id &gt; #{id}
		ORDER  BY id ASC
		LIMIT  0, 1
	</select>
	
	<!-- 전체 게시물 수를 조회한다. -->
	<select id="selectNoticeCount"
		parameterType="study.spring.seoul4u.model.Notice"
		resultType="int">
		SELECT COUNT(id) FROM customer_center
		<where>
			category='notice'
			<if test="subject != null or content != null">
				AND (
					<if test="search == 'subject'">
						subject LIKE concat('%', #{subject}, '%')
					</if>
					<if test="search == 'content'">
						content LIKE concat('%', #{content}, '%')
					</if>
						)
			</if>
		</where>
	</select>
	<!-- 공지사항 게시물을 등록한다. -->
	<insert id="insertNotice" parameterType="study.spring.seoul4u.model.Notice"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO customer_center (
			category, subject, content, hit, reg_date, edit_date, ip_address, member_id
		) VALUES (
			'notice', #{subject}, #{content}, 0, now(), now(), #{ipAddress}, #{memberId}
			)
	</insert>
	
	<!-- 공지사항 게시물 정보 수정하기 -->
	<update id="updateNotice" parameterType="study.spring.seoul4u.model.Notice">	
	UPDATE 	customer_center 
	SET
			id=#{id},
			subject=#{subject},
			content=#{content},
			hit=#{hit},
			edit_date=now(),
			ip_address=#{ipAddress},
			member_id=#{memberId}
	WHERE 	id=#{id}
	</update>
	
	<!-- 공지사항 조회수 1 증가 -->
	<update id="updateNoticeHit" parameterType="study.spring.seoul4u.model.Notice">
		UPDATE customer_center SET hit=hit+1 WHERE category='notice' AND id=#{id}
	</update>
	
	<!-- 공지사항 게시물 삭제하기 -->
	<delete id="deleteNotice" parameterType="study.spring.seoul4u.model.Notice">
		DELETE FROM customer_center WHERE id=#{id}
	</delete>
	
	
</mapper>