<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="MemberMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="member" type="study.spring.seoul4u.model.Member">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="id" column="id" />
		<result property="name" column="name" />
		<result property="userId" column="user_id" />
		<result property="userPw" column="user_pw" />
		<result property="email" column="email" />
		<result property="birthdate" column="birthdate" />
		<result property="tel" column="tel" />
		<result property="profileImg" column="profile_img" />
		<result property="regDate" column="reg_date" />
		<result property="editDate" column="edit_date" />
		<result property="gender" column="gender" />
		<result property="isAdmin" column="isAdmin" />
		<result property="limitStart" column="limitStart"/>
		<result property="listCount" column="listCount"/>
		<result property="search" column="search"/>
		<result property="date" column="date"/>		
	</resultMap>
	
	<!-- 아이디 중복검사를 수행한다 -->
    <select id="selectUserIdCount" parameterType="study.spring.seoul4u.model.Member" resultType="int">
        SELECT count(id) FROM member WHERE user_id=#{userId}
    </select>
     
    <!-- 이메일 중복검사를 수행한다 -->
    <select id="selectEmailCount" parameterType="study.spring.seoul4u.model.Member" resultType="int">
        SELECT count(id) FROM member WHERE email=#{email}
    </select>
    
    <!-- 가입된 아이디에 해당하는 이메일인지 검사한다. -->
    <select id="selectUserIdEmailCount" parameterType="study.spring.seoul4u.model.Member" resultType="int">
    	SELECT count(id) FROM member WHERE user_id=#{userId} AND email=#{email}
    </select>
    <!-- 회원정보를 저장한다 : 가입 -->
	<insert id="insertMember" parameterType="study.spring.seoul4u.model.Member" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO member (
			name, user_id, user_pw, 
			email, birthdate, tel, profile_img,
			reg_date, edit_date, gender, is_admin
		) VALUES (
			#{name}, #{userId}, password(#{userPw}),
			#{email}, #{birthdate}, #{tel}, #{profileImg},
			now(), now(), #{gender}, 'N'
		)
	</insert>
	
	<!-- 회원정보를 불러온다 -->
	<select id="selectLoginInfo" parameterType="study.spring.seoul4u.model.Member" resultMap="member">
		SELECT
        	id, name, user_id, user_pw, email, gender,
        	DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate,
        	tel, profile_img, reg_date, edit_date, is_admin
        FROM member
        WHERE user_id=#{userId} AND user_pw=password(#{userPw})
        ORDER BY id DESC
        LIMIT 0, 1
	</select>
	
	<!-- 회원정보를 불러온다 -->
	<select id="selectAdminInfo" parameterType="study.spring.seoul4u.model.Member" resultMap="member">
		SELECT
        	id, name, user_id, user_pw, email, gender,
        	DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate,
        	tel, profile_img, reg_date, edit_date, is_admin
        FROM member
        WHERE user_id=#{userId} AND user_pw=#{userPw} AND is_admin='Y'
        ORDER BY id DESC
        LIMIT 0, 1
	</select>
	<!-- 아이디를 찾는다. -->
	<select id="selectUserIdByTel" parameterType="study.spring.seoul4u.model.Member"  resultMap="member">
		SELECT user_id
		FROM member
		WHERE name=#{name} AND tel=#{tel}
		ORDER BY id DESC
		LIMIT 0, 1
	</select>
	
	<!-- 비밀번호 재발급: 이메일주소가 일치하는 비밀번호를 변경한다. -->
	<update id="updateMemberPasswordByEmail" parameterType="study.spring.seoul4u.model.Member">
		UPDATE member SET user_pw=password(#{userPw}), edit_date=now()
		WHERE email=#{email};
	</update>
	
	<!-- 현재 로그인 중인 회원의 비밀번호를 검사한다. -->
	<select id="selectMemberPasswordCount" parameterType="study.spring.seoul4u.model.Member"
		resultType="int">
		SELECT count(id) FROM member
		WHERE user_pw=password(#{userPw});
	</select>
	
	<!-- 회원정보를 삭제한다 : 탈퇴 -->
	<delete id="deleteMember" parameterType="study.spring.seoul4u.model.Member">
		DELETE FROM member WHERE user_id=#{userId};
	</delete>
	
	<!-- 회원정보를 변경한다 -->
	<update id="updateMember" parameterType="study.spring.seoul4u.model.Member">
		UPDATE member SET
			tel=#{tel}, edit_date=now()
			
			<if test="newUserPw != null and newUserPw != ''">
				, user_pw=password(#{newUserPw})
			</if>
			
			<choose>
				<when test="profileImg == ''">
					, profile_img=null
				</when>
				<when test="profileImg != null">
					, profile_img=#{profileImg}
				</when>
			</choose>
		
		WHERE id=#{id}
	</update>
	
	<!-- 일련번호에 의한 회원정보 조회 -->
	<select id="selectMember" parameterType="study.spring.seoul4u.model.Member"
		resultMap="member">
		SELECT
			id, name, user_id, user_pw, email, gender,
			DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate,
			tel, profile_img, reg_date, edit_date, is_admin
		FROM member
		WHERE id=#{id}
	</select>
	
	<!-- 회원목록 조회(이름으로 검색)-->
	<select id="selectMemberList" parameterType="study.spring.seoul4u.model.Member"
		resultMap="member">
		SELECT
			id, name, user_id, user_pw, email, gender,
			DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate,
			tel, profile_img, reg_date, edit_date, is_admin
		FROM member

		<where>
			is_admin='N'
			<if test="userId != null">
				<if test="date == 'lastest'">
					AND (
						<if test="search == 'userid'">
							user_id LIKE concat('%', #{userId}, '%')
						</if>
						<if test="search == 'tel'">
							tel LIKE concat('%', #{tel}, '%')
						</if>
						<if test="search == 'gender'">
							gender LIKE concat('%', #{gender}, '%')
						</if> 
	
						<if test="search == 'email'">
							email LIKE concat('%', #{email}, '%')
						</if> 
							)
					ORDER BY id DESC			
				</if>
					
				<if test="date == 'last'">
					AND (
						<if test="search == 'userid'">
							user_id LIKE concat('%', #{userId}, '%')
						</if>
						<if test="search == 'tel'">
							tel LIKE concat('%', #{tel}, '%')
						</if>
						<if test="search == 'gender'">
							gender LIKE concat('%', #{gender}, '%')
						</if> 
	
						<if test="search == 'email'">
							email LIKE concat('%', #{email}, '%')
						</if> 
							)
					ORDER BY id ASC			
				</if>
			</if>
		</where>
		ORDER BY id DESC
		LIMIT #{limitStart}, #{listCount}
	</select>
	
	<!-- 조인 결과에 대한 전체 데이터 수 얻기 -->
	<select id="selectMemberCount" parameterType="study.spring.seoul4u.model.Member"
		resultType="int">
		SELECT count(id) FROM member
		<where>
			<if test="date == 'lastest'">
				AND (
					<if test="search == 'userid'">
						user_id LIKE concat('%', #{userId}, '%')
					</if>
					<if test="search == 'tel'">
						tel LIKE concat('%', #{tel}, '%')
					</if>
					<if test="search == 'gender'">
						gender LIKE concat('%', #{gender}, '%')
					</if> 
					<if test="search == 'email'">
						email LIKE concat('%', #{email}, '%')
					</if> 
						)
				ORDER BY id DESC			
			</if>
				
			<if test="date == 'last'">
				AND (
					<if test="search == 'userid'">
						user_id LIKE concat('%', #{userId}, '%')
					</if>
					<if test="search == 'tel'">
						tel LIKE concat('%', #{tel}, '%')
					</if>
					<if test="search == 'gender'">
						gender LIKE concat('%', #{gender}, '%')
					</if> 
					<if test="search == 'email'">
						email LIKE concat('%', #{email}, '%')
					</if> 
						)
				ORDER BY id ASC			
			</if>
		</where>
	</select>
	
	<!-- 관리자에 의한 회원 탈퇴 -->
	<delete id="deleteMemberByAdmin" parameterType="study.spring.seoul4u.model.Member">
		DELETE FROM member WHERE id=#{id};
	</delete>
</mapper>